
#===============================================================================#
# ASCII Text to DNA 4-Base Codon Translator					#
# Michael Ting									#
# 1 August 2013									#
#===============================================================================#

Package to translate ASCII text to DNA. 256-character ASCII is used to translate
to 4-base DNA codons, analogous to the quaternary numeral system where T:0, A:1,
G:2, C:3.

Two options are available:
	- Codon Translation
	- Direct Binary Translation

#=======#
# Notes #
#=======#

DNA output from binaryDNA will be twice as long as the output from ASCIIcodons.

ASCIIcodons encodes 256 characters using 4-base codons (4^4 distinct codons).
Therefore, one character corresponds to 4 DNA bases.

binaryDNA encodes one-to-one between binary and DNA bases, with 0 mapping to
A or C and 1 mapping to G or T. Binary representations of ASCII codes are
a byte (or 8 bits) long, so one character corresponds to 8 DNA bases.

#=============#
# Future Work #
#=============#

===Codons===

A known issue is that standard English alphabet characters are encoded within
the range of values 64-128, meaning using base 4 encoding creates a skewed
distribution of DNA codons when sampling the alphabet. All alphabetical
characters will begin with the same base in the initial base position, which
can result in high GC content for long strings of English text, given that
the first base is C or G.

There is a quick, but temporary, fix for this - mapping T:0,A:1,G:2,C:3 - but
these mappings are arbitrary and still skew the distribution towards AT.

A better solution would be to randomize the mapping of codons to ASCII characters
and/or reduce the number of bases used in the codons by eliminating unused
ASCII characters.

- Change the distribution of character mappings to be more uniform
- Handle DNA strings of length indivisible by 4
- Allow reverse translation in 4 different reading frames

#===================#
# Using ASCIIcodons #
#===================#

Current object classes included:

* TextToDNA
* DNAToText

To translate input files, start up the Python interpreter and instantiate
one of the above object classes:

>>> from ASCIIcodons import TextToDNA
>>> obj = TextToDNA()

To translate an ASCII text file to DNA, specify input and output files:

>>> obj.translate("/path/to/ASCIItextfile","/path/to/outputfile")

The output file will print to the screen, and can also be accessed from the
specific path location.

For reverse translation from DNA to ASCII text:

>>> from ASCIIcodons import DNAToText
>>> obj = DNAToText()
>>> obj.translate("/path/to/dnatextfile","/path/to/outputfile")

To use all object classes simultaneously:

>>> from ASCIIcodons import *

#=================#
# Using binaryDNA #
#=================#

Current object classes include:

* BinaryTextToDNA
* DNAToBinaryText

To translate input files, start up the Python interpreter and instantiate
one of the above object classes:

>>> from binaryDNA import BinaryTextToDNA
>>> obj = BinaryTextToDNA()

To Translate an ASCII text file to DNA through binary, specify input and output files:

>>> obj.translate("/path/to/ASCIItextfile","/path/to/outputfile")

The output file will print to the screen, and can also be accessed from the
specific path location.

For reverse translation from DNA to ASCII text through binary:

>>> from binaryDNA import DNAToBinaryText
>>> obj = DNAToBinaryText()
>>> obj.translate("/path/to/dnatextfile","/path/to/outputfile")

To use all object classes simultaneously:

>>> from binaryDNA import *

#=====================#
# Formatting of files #
#=====================#

Input text files support the ASCII 256-character set.

Input DNA files should be formatted as plain strings of upper-case DNA:

	ATGAGGATTTACGGGT
	CCAC
	ATCGAGACCCCA

DNA strings should be of length being a multiple of 4. Handling of DNA 
with lengths indivisible by 4 will be implemented in the future.
